#!/usr/bin/env node

/**
 * Env-Sync - Ferramenta para sincroniza√ß√£o de configura√ß√µes de banco de dados
 * Gerencia portas de banco de dados em m√∫ltiplos projetos C#/React
 */

import { ConfigManager, Environment } from "./config-manager"
import { PortUpdater } from "./port-updater"
import { InputHandler } from "./input-handler"

/**
 * Aplica√ß√£o principal do Env-Sync.
 */
export class EnvSyncApp {
  private configManager: ConfigManager
  private portUpdater: PortUpdater
  private inputHandler: InputHandler

  constructor() {
    this.configManager = new ConfigManager()
    this.portUpdater = new PortUpdater()
    this.inputHandler = new InputHandler()
  }

  /**
   * Executa a aplica√ß√£o principal.
   */
  async run(): Promise<void> {
    console.log("=".repeat(60))
    console.log("üîß ENV-SYNC - Gerenciador de Configura√ß√µes de Ambientes")
    console.log("=".repeat(60))
    console.log()

    try {
      // Verifica se h√° ambientes configurados
      if (!this.configManager.hasEnvironments()) {
        console.log("üìã Nenhum ambiente configurado encontrado.")
        console.log("Vamos configurar seu primeiro ambiente!\n")

        const success = await this.setupFirstEnvironment()
        if (!success) {
          console.log("‚ùå Configura√ß√£o cancelada.")
          return
        }
        console.log()
      }

      // Lista ambientes e permite sele√ß√£o
      const environment = await this.selectEnvironment()
      if (!environment) {
        console.log("‚ùå Nenhum ambiente selecionado.")
        return
      }

      // Mostra pr√©via das mudan√ßas
      this.showPreview(environment.port)

      // Confirma a execu√ß√£o
      const shouldContinue = await this.confirmExecution()
      if (!shouldContinue) {
        console.log("‚ùå Opera√ß√£o cancelada.")
        return
      }

      // Executa a atualiza√ß√£o
      this.executeUpdate(environment.port)
    } catch (error) {
      if (error instanceof Error && error.message === "SIGINT") {
        console.log("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
      } else {
        console.error(`\n‚ùå Erro inesperado: ${error}`)
      }
    } finally {
      this.inputHandler.close()
    }
  }

  /**
   * Configura o primeiro ambiente.
   */
  private async setupFirstEnvironment(): Promise<boolean> {
    console.log("Por favor, forne√ßa os dados do ambiente:")

    try {
      const name = await this.inputHandler.requiredInput("Nome do ambiente: ")
      const url = await this.inputHandler.requiredInput("URL do ambiente: ")
      const port = await this.inputHandler.requiredInput("Porta do banco: ")
      const username = await this.inputHandler.requiredInput("Usu√°rio do banco: ")
      const password = await this.inputHandler.requiredInput("Senha do banco: ")

      // Valida a porta
      if (!PortUpdater.isValidPort(port)) {
        console.log("‚ùå Porta inv√°lida! Deve ser um n√∫mero entre 1 e 65535.")
        return false
      }

      return this.configManager.addEnvironment(name, url, port, username, password)
    } catch (error) {
      return false
    }
  }

  /**
   * Permite ao usu√°rio selecionar um ambiente.
   */
  private async selectEnvironment(): Promise<Environment | null> {
    const environments = this.configManager.listEnvironments()

    if (environments.length === 0) {
      console.log("‚ùå Nenhum ambiente encontrado!")
      return null
    }

    console.log("üåç Ambientes dispon√≠veis:")
    console.log("-".repeat(40))

    environments.forEach((env, index) => {
      console.log(`${index + 1}. ${env.name}`)
      console.log(`   URL: ${env.url}`)
      console.log(`   Porta: ${env.port}`)
      console.log(`   Usu√°rio: ${env.username}`)
      console.log()
    })

    console.log("0. Adicionar novo ambiente")
    console.log("q. Sair")
    console.log()

    while (true) {
      const choice = await this.inputHandler.selectOption(
        "Selecione uma op√ß√£o: ",
        environments.length,
        true,
      )

      if (choice === null) {
        return null
      }

      if (choice === 0) {
        const added = await this.addNewEnvironment()
        if (added) {
          return this.selectEnvironment() // Recarrega a lista
        }
        continue
      }

      const selected = environments[choice - 1]
      console.log(`\n‚úÖ Ambiente selecionado: ${selected.name} (Porta: ${selected.port})`)
      return selected
    }
  }

  /**
   * Adiciona um novo ambiente.
   */
  private async addNewEnvironment(): Promise<boolean> {
    console.log("\nüìù Adicionar novo ambiente:")
    console.log("-".repeat(30))

    try {
      const name = await this.inputHandler.requiredInput("Nome do ambiente: ")
      const url = await this.inputHandler.requiredInput("URL do ambiente: ")
      const port = await this.inputHandler.requiredInput("Porta do banco: ")
      const username = await this.inputHandler.requiredInput("Usu√°rio do banco: ")
      const password = await this.inputHandler.requiredInput("Senha do banco: ")

      // Valida a porta
      if (!PortUpdater.isValidPort(port)) {
        console.log("‚ùå Porta inv√°lida! Deve ser um n√∫mero entre 1 e 65535.")
        return false
      }

      return this.configManager.addEnvironment(name, url, port, username, password)
    } catch (error) {
      console.log("\n‚ùå Adi√ß√£o cancelada.")
      return false
    }
  }

  /**
   * Mostra uma pr√©via das mudan√ßas que ser√£o feitas.
   */
  private showPreview(newPort: string): void {
    console.log("\nüîç Pr√©via das mudan√ßas:")
    console.log("-".repeat(40))

    const preview = this.portUpdater.previewChanges(newPort)

    if (Object.keys(preview).length === 0) {
      console.log(
        "‚ÑπÔ∏è  Nenhuma mudan√ßa ser√° feita (nenhum arquivo encontrado ou portas j√° est√£o corretas).",
      )
      return
    }

    Object.entries(preview).forEach(([filePath, changes]) => {
      console.log(`\nüìÅ ${filePath}`)
      changes.forEach((change) => {
        console.log(`   üîÑ ${change}`)
      })
    })

    console.log(`\nTotal de arquivos que ser√£o modificados: ${Object.keys(preview).length}`)
  }

  /**
   * Confirma se o usu√°rio quer executar a atualiza√ß√£o.
   */
  private async confirmExecution(): Promise<boolean> {
    console.log("\n" + "=".repeat(50))
    return await this.inputHandler.confirm("Deseja continuar com a atualiza√ß√£o? (s/n): ")
  }

  /**
   * Executa a atualiza√ß√£o das portas.
   */
  private executeUpdate(newPort: string): void {
    console.log("\nüöÄ Executando atualiza√ß√£o...")
    console.log("=".repeat(50))

    const result = this.portUpdater.updatePortsInAllFiles(newPort)

    console.log("\n" + "=".repeat(50))
    console.log("üìä RESUMO DA OPERA√á√ÉO")
    console.log("=".repeat(50))
    console.log(this.portUpdater.getSummary())

    if (result.updatedFiles.length > 0) {
      console.log("\n‚úÖ Opera√ß√£o conclu√≠da com sucesso!")
      console.log(`   ${result.updatedFiles.length} arquivo(s) atualizado(s)`)
    }

    if (result.failedFiles.length > 0) {
      console.log("\n‚ö†Ô∏è  Alguns arquivos n√£o puderam ser atualizados:")
      console.log(`   ${result.failedFiles.length} arquivo(s) com erro`)
    }
  }

  /**
   * Mostra informa√ß√µes de ajuda.
   */
  showHelp(): void {
    const helpText = `
üîß ENV-SYNC - Gerenciador de Configura√ß√µes de Banco
==================================================

DESCRI√á√ÉO:
   Esta ferramenta ajuda a gerenciar portas de banco de dados em m√∫ltiplos
   projetos C# e React, permitindo trocar rapidamente entre diferentes
   ambientes de desenvolvimento.

FUNCIONALIDADES:
   ‚Ä¢ Gerenciamento de m√∫ltiplos ambientes (dev, test, prod, etc.)
   ‚Ä¢ Busca autom√°tica por arquivos databasesettings.json
   ‚Ä¢ Atualiza√ß√£o autom√°tica de portas em connection strings
   ‚Ä¢ Backup autom√°tico dos arquivos originais
   ‚Ä¢ Pr√©via das mudan√ßas antes da execu√ß√£o

FORMATO DE CONNECTION STRING SUPORTADO:
   ‚Ä¢ Server=localhost;Port=5432;Database=...
   ‚Ä¢ Data Source=localhost:5432;Initial Catalog=...
   ‚Ä¢ server=localhost,5432;database=...

USO:
   npm start

COMANDOS DURANTE A EXECU√á√ÉO:
   s/sim/y/yes - Confirma opera√ß√£o
   n/n√£o/no    - Cancela opera√ß√£o
   q           - Sair do programa
   0           - Adicionar novo ambiente

DESENVOLVIMENTO:
   npm run dev     - Executa em modo desenvolvimento
   npm run build   - Compila TypeScript para JavaScript
   npm run watch   - Compila em modo watch
`
    console.log(helpText)
  }
}

/**
 * Fun√ß√£o principal.
 */
async function main(): Promise<void> {
  const args = process.argv.slice(2)

  if (args.length > 0 && ["-h", "--help", "help"].includes(args[0])) {
    const app = new EnvSyncApp()
    app.showHelp()
    return
  }

  const app = new EnvSyncApp()
  await app.run()
}

// Executa apenas se este arquivo for executado diretamente
if (require.main === module) {
  main().catch((error) => {
    console.error("Erro fatal:", error)
    process.exit(1)
  })
}
