import chalk from "chalk"
import figlet from "figlet"
import boxen from "boxen"
import Table from "cli-table3"
import ora from "ora"
import { Environment } from "./config-manager"
import { PreviewChanges } from "./port-updater"

/**
 * Gerencia a interface visual do usu√°rio com cores e formata√ß√£o atrativa.
 */
export class UIManager {

  /**
   * Exibe o banner principal da aplica√ß√£o.
   */
  showBanner(): void {
    console.clear()

    const title = figlet.textSync("ENV-SYNC", {
      font: "ANSI Shadow",
      horizontalLayout: "default",
      verticalLayout: "default",
    })

    const banner = boxen(
      chalk.cyan.bold(title) +
      "\n\n" +
      chalk.white("üîß Gerenciador de Configura√ß√µes de Ambientes") +
      "\n" +
      chalk.gray("Sincronize portas de banco de dados em projetos C#"),
      {
        padding: 1,
        margin: 1,
        borderStyle: "round",
        borderColor: "cyan",
        backgroundColor: "black"
      }
    )

    console.log(banner)
  }

  /**
   * Exibe lista de ambientes de forma visual atrativa.
   */
  showEnvironmentsList(environments: Environment[]): void {
    if (environments.length === 0) {
      const message = boxen(
        chalk.yellow("üìã Nenhum ambiente configurado"),
        {
          padding: 1,
          borderStyle: "round",
          borderColor: "yellow"
        }
      )
      console.log(message)
      return
    }

    console.log(chalk.cyan.bold("\nüåç Ambientes Dispon√≠veis:"))
    console.log(chalk.gray("‚îÄ".repeat(80)))

    const table = new Table({
      head: [
        chalk.white.bold("ID"),
        chalk.white.bold("Nome"),
        chalk.white.bold("URL"),
        chalk.white.bold("Porta"),
        chalk.white.bold("Usu√°rio")
      ],
      colWidths: [5, 20, 25, 10, 15],
      style: {
        head: ["cyan"],
        border: ["cyan"]
      }
    })

    environments.forEach((env, index) => {
      table.push([
        chalk.cyan.bold((index + 1).toString()),
        chalk.green(env.name),
        chalk.blue(env.url),
        chalk.yellow(env.port),
        chalk.magenta(env.username)
      ])
    })

    console.log(table.toString())

    // Op√ß√µes adicionais
    console.log(chalk.gray("\nüìå Op√ß√µes adicionais:"))
    console.log(chalk.white("  0. ") + chalk.green("Adicionar novo ambiente"))
    console.log(chalk.white("  q. ") + chalk.red("Sair"))
    console.log()
  }

  /**
   * Exibe preview das mudan√ßas de forma visualmente atrativa.
   */
  showPreview(preview: PreviewChanges, newPort: string): void {
    console.log(chalk.cyan.bold("\nüîç Preview das Mudan√ßas:"))
    console.log(chalk.gray("‚îÄ".repeat(80)))

    if (Object.keys(preview).length === 0) {
      const message = boxen(
        chalk.yellow("‚ÑπÔ∏è  Nenhuma mudan√ßa ser√° feita") + "\n" +
        chalk.gray("(Nenhum arquivo encontrado ou portas j√° est√£o corretas)"),
        {
          padding: 1,
          borderStyle: "round",
          borderColor: "yellow",
          align: "center"
        }
      )
      console.log(message)
      return
    }

    let totalChanges = 0
    Object.entries(preview).forEach(([filePath, changes]) => {
      totalChanges += changes.length

      // Header do arquivo
      console.log(chalk.blue.bold(`\nüìÅ ${this.getRelativePath(filePath)}`))
      console.log(chalk.gray("   " + "‚îÄ".repeat(60)))

      // Lista as mudan√ßas
      changes.forEach((change) => {
        const [keyPath, portChange] = change.split(": ")
        const [oldPort, newPortDisplay] = portChange.split(" ‚Üí ")

        console.log(
          chalk.gray("   üîÑ ") +
          chalk.white(keyPath) + ": " +
          chalk.red(oldPort) +
          chalk.gray(" ‚Üí ") +
          chalk.green(newPortDisplay)
        )
      })
    })

    // Resumo
    const summary = boxen(
      chalk.white.bold("üìä Resumo:") + "\n" +
      chalk.cyan(`   ‚Ä¢ Arquivos a serem modificados: ${Object.keys(preview).length}`) + "\n" +
      chalk.cyan(`   ‚Ä¢ Total de mudan√ßas: ${totalChanges}`) + "\n" +
      chalk.cyan(`   ‚Ä¢ Nova porta: ${newPort}`),
      {
        padding: 1,
        margin: 1,
        borderStyle: "round",
        borderColor: "green"
      }
    )

    console.log(summary)
  }

  /**
   * Exibe formul√°rio para adicionar novo ambiente.
   */
  showAddEnvironmentForm(): void {
    const header = boxen(
      chalk.yellow.bold("üìù Adicionar Novo Ambiente"),
      {
        padding: 1,
        borderStyle: "round",
        borderColor: "yellow",
        align: "center"
      }
    )
    console.log(header)
    console.log(chalk.gray("Preencha os dados do novo ambiente:\n"))
  }

  /**
   * Exibe confirma√ß√£o de opera√ß√£o.
   */
  showConfirmation(): void {
    console.log(chalk.yellow.bold("\n‚ö†Ô∏è  Confirma√ß√£o de Opera√ß√£o"))
    console.log(chalk.gray("‚ïê".repeat(50)))
  }

  /**
   * Exibe progresso da opera√ß√£o.
   */
  showProgress(message: string): ora.Ora {
    return ora({
      text: chalk.cyan(message),
      spinner: "dots",
      color: "cyan"
    }).start()
  }

  /**
   * Exibe resumo final da opera√ß√£o.
   */
  showOperationSummary(updatedFiles: string[], failedFiles: string[]): void {
    console.log(chalk.cyan.bold("\nüìä Resumo da Opera√ß√£o"))
    console.log(chalk.gray("‚ïê".repeat(50)))

    if (updatedFiles.length > 0) {
      console.log(chalk.green.bold(`\n‚úÖ ${updatedFiles.length} arquivo(s) atualizado(s) com sucesso:`))
      updatedFiles.forEach(file => {
        console.log(chalk.green(`   ‚úì ${this.getRelativePath(file)}`))
      })
    }

    if (failedFiles.length > 0) {
      console.log(chalk.red.bold(`\n‚ùå ${failedFiles.length} arquivo(s) com erro:`))
      failedFiles.forEach(file => {
        console.log(chalk.red(`   ‚úó ${this.getRelativePath(file)}`))
      })
    }

    if (updatedFiles.length === 0 && failedFiles.length === 0) {
      console.log(chalk.yellow("‚ÑπÔ∏è  Nenhum arquivo foi processado."))
    }

    // Box final
    const totalFiles = updatedFiles.length + failedFiles.length
    const successRate = totalFiles > 0 ? Math.round((updatedFiles.length / totalFiles) * 100) : 0

    const finalMessage = boxen(
      chalk.white.bold("üéØ Opera√ß√£o Conclu√≠da") + "\n\n" +
      chalk.cyan(`Taxa de sucesso: ${successRate}%`) + "\n" +
      chalk.cyan(`Arquivos processados: ${totalFiles}`),
      {
        padding: 1,
        margin: 1,
        borderStyle: "round",
        borderColor: updatedFiles.length > 0 ? "green" : "yellow",
        align: "center"
      }
    )

    console.log(finalMessage)
  }

  /**
   * Exibe mensagem de sucesso.
   */
  showSuccess(message: string): void {
    const successBox = boxen(
      chalk.green.bold("‚úÖ " + message),
      {
        padding: 1,
        borderStyle: "round",
        borderColor: "green",
        align: "center"
      }
    )
    console.log(successBox)
  }

  /**
   * Exibe mensagem de erro.
   */
  showError(message: string): void {
    const errorBox = boxen(
      chalk.red.bold("‚ùå " + message),
      {
        padding: 1,
        borderStyle: "round",
        borderColor: "red",
        align: "center"
      }
    )
    console.log(errorBox)
  }

  /**
   * Exibe mensagem de aviso.
   */
  showWarning(message: string): void {
    const warningBox = boxen(
      chalk.yellow.bold("‚ö†Ô∏è  " + message),
      {
        padding: 1,
        borderStyle: "round",
        borderColor: "yellow",
        align: "center"
      }
    )
    console.log(warningBox)
  }

  /**
   * Exibe informa√ß√µes de ajuda visual.
   */
  showHelp(): void {
    console.clear()

    const helpTitle = figlet.textSync("HELP", {
      font: "Small",
      horizontalLayout: "default",
    })

    console.log(chalk.cyan.bold(helpTitle))
    console.log(chalk.gray("‚îÄ".repeat(80)))

    const sections = [
      {
        title: "üìã DESCRI√á√ÉO",
        content: "Esta ferramenta ajuda a gerenciar portas de banco de dados em m√∫ltiplos\nprojetos C# e React, permitindo trocar rapidamente entre diferentes\nambientes de desenvolvimento."
      },
      {
        title: "‚ö° FUNCIONALIDADES",
        content: "‚Ä¢ Gerenciamento de m√∫ltiplos ambientes (dev, test, prod, etc.)\n‚Ä¢ Busca autom√°tica por arquivos databasesettings.json\n‚Ä¢ Atualiza√ß√£o autom√°tica de portas em connection strings\n‚Ä¢ Backup autom√°tico dos arquivos originais\n‚Ä¢ Preview das mudan√ßas antes da execu√ß√£o"
      },
      {
        title: "üîß COMANDOS",
        content: "npm start          - Executa a aplica√ß√£o\nnpm run dev        - Executa em modo desenvolvimento\nnpm run build      - Compila TypeScript\nnpm run watch      - Compila em modo watch"
      },
      {
        title: "‚å®Ô∏è  CONTROLES",
        content: "s/sim/y/yes - Confirma opera√ß√£o\nn/n√£o/no    - Cancela opera√ß√£o\nq           - Sair do programa\n0           - Adicionar novo ambiente"
      }
    ]

    sections.forEach(section => {
      console.log(chalk.cyan.bold(`\n${section.title}`))
      console.log(chalk.white(section.content))
    })

    const footer = boxen(
      chalk.gray("Para mais informa√ß√µes, visite: ") +
      chalk.blue("https://github.com/fabioivan/env-sync"),
      {
        padding: 1,
        margin: 1,
        borderStyle: "round",
        borderColor: "blue",
        align: "center"
      }
    )

    console.log(footer)
  }

  /**
   * Converte caminho absoluto em relativo mais leg√≠vel.
   */
  private getRelativePath(fullPath: string): string {
    const homePath = require("os").homedir()
    if (fullPath.startsWith(homePath)) {
      return "~" + fullPath.substring(homePath.length)
    }
    return fullPath
  }

  /**
   * Exibe ambiente selecionado.
   */
  showSelectedEnvironment(environment: Environment): void {
    const selectedBox = boxen(
      chalk.green.bold("‚úÖ Ambiente Selecionado") + "\n\n" +
      chalk.white.bold("Nome: ") + chalk.cyan(environment.name) + "\n" +
      chalk.white.bold("URL: ") + chalk.blue(environment.url) + "\n" +
      chalk.white.bold("Porta: ") + chalk.yellow(environment.port) + "\n" +
      chalk.white.bold("Usu√°rio: ") + chalk.magenta(environment.username),
      {
        padding: 1,
        borderStyle: "round",
        borderColor: "green",
        align: "center"
      }
    )

    console.log(selectedBox)
  }

  /**
   * Limpa a tela.
   */
  clear(): void {
    console.clear()
  }

  /**
   * Adiciona espa√ßamento.
   */
  addSpacing(lines: number = 1): void {
    console.log("\n".repeat(lines - 1))
  }
}