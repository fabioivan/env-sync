#!/usr/bin/env node

const { execSync } = require('child_process');
const chalk = require('chalk');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function getCurrentVersion() {
  const packagePath = path.join(__dirname, '../package.json');
  const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  return packageData.version;
}

function getPackageName() {
  const packagePath = path.join(__dirname, '../package.json');
  const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  return packageData.name;
}

async function main() {
  const currentVersion = getCurrentVersion();
  const packageName = getPackageName();

  console.log(chalk.blue.bold('üöÄ ENV-SYNC - Publica√ß√£o no NPM'));
  console.log(chalk.blue('='.repeat(60)));
  console.log(chalk.cyan(`üì¶ Pacote: ${packageName}`));
  console.log(chalk.cyan(`üìã Vers√£o atual: ${currentVersion}`));

  try {
    // Verifica se est√° logado no NPM
    console.log(chalk.yellow('\n1Ô∏è‚É£ Verificando login no NPM...'));
    try {
      const user = execSync('npm whoami', { encoding: 'utf8' }).trim();
      console.log(chalk.green(`‚úÖ Logado como: ${user}`));
    } catch {
      console.log(chalk.red('‚ùå N√£o est√° logado no NPM'));
      const shouldLogin = await question('Deseja fazer login agora? (s/n): ');

      if (shouldLogin.toLowerCase().startsWith('s')) {
        execSync('npm login', { stdio: 'inherit' });
        console.log(chalk.green('‚úÖ Login realizado!'));
      } else {
        console.log(chalk.red('‚ùå Login necess√°rio para publicar'));
        process.exit(1);
      }
    }

    // Executa testes
    console.log(chalk.yellow('\n2Ô∏è‚É£ Executando testes...'));
    execSync('npm run test:npm', { stdio: 'inherit' });

    // Sele√ß√£o do tipo de vers√£o
    console.log(chalk.yellow('\n3Ô∏è‚É£ Sele√ß√£o do tipo de vers√£o'));
    console.log(chalk.white('Escolha o tipo de incremento de vers√£o:'));
    console.log(chalk.cyan('1) patch (1.0.0 ‚Üí 1.0.1) - Corre√ß√µes de bugs'));
    console.log(chalk.cyan('2) minor (1.0.0 ‚Üí 1.1.0) - Novas funcionalidades'));
    console.log(chalk.cyan('3) major (1.0.0 ‚Üí 2.0.0) - Mudan√ßas incompat√≠veis'));
    console.log(chalk.gray('4) Cancelar publica√ß√£o'));

    const versionChoice = await question('\nDigite sua op√ß√£o (1-4): ');

    let versionType;
    switch (versionChoice.trim()) {
      case '1':
        versionType = 'patch';
        break;
      case '2':
        versionType = 'minor';
        break;
      case '3':
        versionType = 'major';
        break;
      case '4':
      default:
        console.log(chalk.yellow('‚ùå Publica√ß√£o cancelada'));
        process.exit(0);
    }

    // Incrementa vers√£o
    console.log(chalk.yellow(`\n4Ô∏è‚É£ Incrementando vers√£o (${versionType})...`));
    execSync(`npm version ${versionType}`, { stdio: 'inherit' });

    const newVersion = getCurrentVersion();
    console.log(chalk.green(`‚úÖ Nova vers√£o: ${newVersion}`));

    // Confirma publica√ß√£o
    console.log(chalk.yellow('\n5Ô∏è‚É£ Confirma√ß√£o de publica√ß√£o'));
    console.log(chalk.cyan(`üì¶ Pacote: ${packageName}@${newVersion}`));

    const shouldPublish = await question('Deseja continuar com a publica√ß√£o? (s/n): ');

    if (!shouldPublish.toLowerCase().startsWith('s')) {
      console.log(chalk.yellow('‚ùå Publica√ß√£o cancelada'));
      console.log(chalk.gray('üí° A vers√£o foi incrementada, mas n√£o publicada'));
      process.exit(0);
    }

    // Publica
    console.log(chalk.yellow('\n6Ô∏è‚É£ Publicando no NPM...'));
    execSync('npm publish', { stdio: 'inherit' });

    // Sucesso
    const finalVersion = getCurrentVersion();
    console.log(chalk.green.bold('\nüéâ SUCESSO!'));
    console.log(chalk.green(`‚úÖ Pacote ${packageName}@${finalVersion} publicado no NPM`));
    console.log(chalk.cyan('\nüì¶ Instru√ß√µes para usu√°rios:'));
    console.log(chalk.white(`npm install -g ${packageName}`));
    console.log(chalk.white('env-sync --help'));

    console.log(chalk.cyan('\nüîó Links √∫teis:'));
    console.log(chalk.white(`NPM: https://www.npmjs.com/package/${packageName}`));
    console.log(chalk.white(`Verifica√ß√£o: npm info ${packageName}`));

    console.log(chalk.cyan('\nüìà Vers√£o publicada:'));
    console.log(chalk.white(`${currentVersion} ‚Üí ${finalVersion}`));

  } catch (error) {
    console.error(chalk.red(`\n‚ùå Erro: ${error.message}`));
    process.exit(1);
  } finally {
    rl.close();
  }
}

main();
